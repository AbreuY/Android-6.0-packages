/**
 * Generated by smali2java 1.0.0.558
 * Copyright (C) 2013 Hensence.com
 */

package com.wx.hallview.fragment;

import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.List;

import android.animation.Animator;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.content.BroadcastReceiver;
import android.content.ContentResolver;
import android.content.Context;  
import android.content.Intent;
import android.content.IntentFilter;
import android.database.Cursor;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Handler;
import android.os.Message;
import android.provider.ContactsContract;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;

import com.wx.hallview.R;
import com.wx.hallview.bean.NotReadMessage;

public class MmsFragment extends BaseFragmentView {
	private MmsFragment.AsyncInitData asyncInitData;
	private List<NotReadMessage> mList;
	private TextView mMessageDetail;
	private ScrollView mMessageDetailContainer;
	private TextView mMessageEmpty;
	private ListView mMessageList;
	private RelativeLayout mMessageListContainer;
	private TextView mMessageTitle;
	private ImageView mTitleBackground;
	private View mView;
	private MmsFragment.ReceiveMms receiveMms;
	private boolean mIsMessageDetail = false;
	private MmsFragment.MessageListAdapter mMessageListAdapter = new MmsFragment.MessageListAdapter(
			this);
	private MmsFragment.MyHandler mHandler = new MmsFragment.MyHandler(this);

	public MmsFragment(Context context) {
		super(context);
	}

	class MyHandler extends Handler {
		WeakReference<MmsFragment> refs;

		public MyHandler(MmsFragment fragment) {
			refs = new WeakReference(fragment);
		}

		public void handleMessage(Message msg) {
			MmsFragment localMmsFragment = (MmsFragment) this.refs.get();
			if (localMmsFragment == null)
				return;

			switch (msg.what) {
			case 2:
				localMmsFragment.loadData();
				return;
			case 10:
				localMmsFragment.mMessageList.setVisibility(8);
				localMmsFragment.mMessageEmpty.setVisibility(0);
				localMmsFragment.mMessageEmpty.setText(R.string.empty);
				return;
			case 11:
				localMmsFragment.mMessageEmpty.setVisibility(8);
				localMmsFragment.mMessageList.setVisibility(0);
				localMmsFragment.mMessageList
						.setAdapter(localMmsFragment.mMessageListAdapter);
				return;
			default:
				return;
			}

		}
	}

	private void loadData() {
		asyncInitData = new AsyncInitData();
		asyncInitData.execute();
	}

	public boolean handleBackPress() {
		if (this.mIsMessageDetail) {
			this.mMessageDetailContainer.setVisibility(0);
			ObjectAnimator localObjectAnimator1 = ObjectAnimator.ofFloat(
					this.mMessageListContainer, "rotationY", new float[] {
							180.0F, 0.0F });
			ObjectAnimator localObjectAnimator2 = ObjectAnimator.ofFloat(
					this.mMessageListContainer, "alpha", new float[] { 0.0F,
							1.0F });
			ObjectAnimator localObjectAnimator3 = ObjectAnimator.ofFloat(
					this.mMessageDetailContainer, "rotationY", new float[] {
							360.0F, 180.0F });
			ObjectAnimator localObjectAnimator4 = ObjectAnimator.ofFloat(
					this.mMessageDetailContainer, "alpha", new float[] { 1.0F,
							0.0F });
			AnimatorSet localAnimatorSet = new AnimatorSet();
			localAnimatorSet.playTogether(new Animator[] {
					localObjectAnimator1, localObjectAnimator2,
					localObjectAnimator3, localObjectAnimator4 });
			localAnimatorSet.addListener(new AnimatorCompleteListener(1));
			localAnimatorSet.setDuration(500L);
			localAnimatorSet.start();
			return true;
		}
		return false;
	}

	public void onAttach() {
		mHandler.sendEmptyMessageDelayed(0x2, 0x0);
		receiveMms = new MmsFragment.ReceiveMms();
		IntentFilter filter = new IntentFilter();
		filter.addAction("com.mediatek.action.UNREAD_CHANGED");
		getContext().registerReceiver(receiveMms, filter);
	}

	public void onDetach() {
		Log.d("MmsFragment", "onDetach");
		if (receiveMms != null) {
			getContext().unregisterReceiver(receiveMms);
			receiveMms = null;
		}
		if (asyncInitData != null) {
			asyncInitData.cancel(true);
			asyncInitData = null;
		}
	}

	public View onCreateView(LayoutInflater inflater, ViewGroup container) {
		mView = inflater.inflate(R.layout.message_fragment, container, false);
		initView();
		initListener();
		return mView;
	}

	private class AsyncInitData extends
			AsyncTask<Void, Void, ArrayList<NotReadMessage>> {

		private AsyncInitData() {
		}

		protected ArrayList<NotReadMessage> doInBackground(Void... arg0) {
			return MmsFragment.this.getNotReadMesaage();
		}

		@Override
		protected void onPostExecute(ArrayList<NotReadMessage> paramArrayList) {
			mList = paramArrayList;
			mMessageListAdapter.notifyDataSetChanged();
			Message msg = Message.obtain();
			if ((mList == null) || (mList.size() == 0)) {
				msg.what = 0xa;
			} else {
				msg.what = 0xb;
			}
			mHandler.sendMessage(msg);
		}

		@Override
		protected void onPreExecute() {
			super.onPreExecute();
		}
	}

	private void initView() {
		mMessageList = (ListView) mView.findViewById(R.id.lv_message_list);
		mMessageDetail = (TextView) mView.findViewById(R.id.tv_message_detail);
		mMessageTitle = (TextView) mView.findViewById(R.id.tv_message_Title);
		mMessageDetailContainer = (ScrollView) mView
				.findViewById(R.id.rl_message_detail_container);
		mMessageListContainer = (RelativeLayout) mView
				.findViewById(R.id.rl_message_list_container);
		mMessageEmpty = (TextView) mView.findViewById(R.id.tv_empty);
		mTitleBackground = (ImageView) mView.findViewById(R.id.iv_title_bg);
		TextView footer = new TextView(getContext());
		footer.setPadding(0x0, 0x0, 0x0, 0x50);
		mMessageList.addFooterView(footer, 0x0, false);
	}

	private void initListener() {

		mMessageList
				.setOnItemClickListener(new AdapterView.OnItemClickListener() {
											
					public void onItemClick(AdapterView<?> paramAnonymousAdapterView, View paramAnonymousView, int paramAnonymousInt, long paramAnonymousLong) {

						MmsFragment.this.mMessageDetail
								.setText(((NotReadMessage) MmsFragment.this.mList
										.get(paramAnonymousInt)).getmBody());
						String str = ((NotReadMessage) MmsFragment.this.mList
								.get(paramAnonymousInt)).getmPhoto_uri();
						if (str != null) {
							Uri localUri = Uri.parse(str);
							MmsFragment.this.mTitleBackground
									.setImageURI(localUri);
						}

						if ((((NotReadMessage) MmsFragment.this.mList
								.get(paramAnonymousInt)).getmPerson() == null)
								|| (((NotReadMessage) MmsFragment.this.mList
										.get(paramAnonymousInt)).getmPerson()
										.equals("0")))
							MmsFragment.this.mMessageTitle
									.setText(((NotReadMessage) MmsFragment.this.mList
											.get(paramAnonymousInt))
											.getmAddress());
						else {
							MmsFragment.this.mMessageTitle
									.setText(((NotReadMessage) MmsFragment.this.mList
											.get(paramAnonymousInt))
											.getmPerson());
                        }
                        
                        
						MmsFragment.this.mMessageDetailContainer
								.setVisibility(0);
						ObjectAnimator localObjectAnimator1 = ObjectAnimator
								.ofFloat(
										MmsFragment.this.mMessageListContainer,
										"rotationY", new float[] { 0.0F,
												180.0F });
						ObjectAnimator localObjectAnimator2 = ObjectAnimator
								.ofFloat(
										MmsFragment.this.mMessageListContainer,
										"alpha", new float[] { 1.0F, 0.0F });
						ObjectAnimator localObjectAnimator3 = ObjectAnimator
								.ofFloat(
										MmsFragment.this.mMessageDetailContainer,
										"rotationY", new float[] { 180.0F,
												360.0F });
						ObjectAnimator localObjectAnimator4 = ObjectAnimator
								.ofFloat(
										MmsFragment.this.mMessageDetailContainer,
										"alpha", new float[] { 0.0F, 1.0F });
						AnimatorSet localAnimatorSet = new AnimatorSet();
						localAnimatorSet
								.playTogether(new Animator[] {
										localObjectAnimator1,
										localObjectAnimator2,
										localObjectAnimator4,
										localObjectAnimator3 });
						localAnimatorSet
								.addListener(new MmsFragment.AnimatorCompleteListener(0));
						localAnimatorSet.setDuration(500L);
						localAnimatorSet.start();
						
					}
				});

		mMessageList
				.setOnScrollListener(new AbsListView.OnScrollListener() {
					private int mScrollState;

					public void onScrollStateChanged(AbsListView arg0,
							int scrollState) {
						mScrollState = scrollState;
					}

					public void onScroll(AbsListView view, int arg1, int arg2,
							int arg3) {
						if (mScrollState == 0x1) {
							View first = view.getChildAt(0x0);
							View second = view.getChildAt(0x2);
							float height = (float) first.getMeasuredHeight();
							float top = (float) -first.getTop();
							float alpha = top / height;
							first.setAlpha((1.0f - alpha));
							second.setAlpha(alpha);
							return;
						} else if (mScrollState == 0x2) {
							View first = view.getChildAt(0x0);
							View last = view.getChildAt(0x2);
							if (first.getAlpha() != 1.0f) {
								first.setAlpha(1.0f);
							}
							if (last.getAlpha() != 1.0f) {
								last.setAlpha(1.0f);
							}
						}
					}
				});
	}

	class AnimatorCompleteListener implements Animator.AnimatorListener {
		private int mEnterMode;

		public AnimatorCompleteListener(int enterMode) {
			mEnterMode = enterMode;
		}

		public void onAnimationCancel(Animator animation) {
		}

		public void onAnimationEnd(Animator animation) {
			if (mEnterMode == 0) {
				Log.d("MmsFragment", "LIST_TO_MESSAGE : onAnimationEnd");
				mMessageListContainer.setVisibility(0x8);
				mIsMessageDetail = true;
				return;
			}

			Log.d("MmsFragment", "MESSAGE_TO_LIST : onAnimationEnd");
			mIsMessageDetail = false;
			mMessageDetailContainer.setVisibility(0x8);
			if ((mList.size() == 0) || (mList == null)) {
				mMessageEmpty.setVisibility(0x0);
				mMessageEmpty.setText(R.string.empty);
			}
		}

		public void onAnimationRepeat(Animator animation) {
		}

		public void onAnimationStart(Animator animation) {
			if (mEnterMode == 0) {
				Log.d("MmsFragment", "LIST_TO_MESSAGE : onAnimationStart");
				mMessageDetailContainer.setVisibility(0x0);
				return;
			}
			Log.d("MmsFragment", "MESSAGE_TO_LIST : onAnimationStart");
			mMessageTitle.setText(R.string.new_message);
			mMessageListAdapter.notifyDataSetChanged();
			mMessageListContainer.setVisibility(0x0);
			mTitleBackground.setImageDrawable(null);
		}
	}

	private ArrayList getNotReadMesaage() {
		ContentResolver cr = getContext().getContentResolver();
		ArrayList<NotReadMessage> list = null;
		Uri uri = Uri.parse("content://sms/");
		Cursor cursor;
		cursor = cr.query(uri, new String[] { "address", "read", "body" }, null,
				null, null);
		if ((cursor != null) && (cursor.getCount() > 0)) {		    
			list = new ArrayList<NotReadMessage>();
			while (cursor.moveToNext()) {
				if (cursor.getInt(0x1) != 0x1) {
					NotReadMessage notReadMessage = new NotReadMessage();
					notReadMessage.setmAddress(cursor.getString(0));
					notReadMessage.setmPerson((String) findNamePhotoByNumber(
							notReadMessage.getmAddress()).get(0x0));
					notReadMessage
							.setmPhoto_uri((String) findNamePhotoByNumber(
									notReadMessage.getmAddress()).get(0x1));
					notReadMessage.setmBody(cursor.getString(2));
					list.add(notReadMessage);
				}
			}
		}
		
		Log.d("MmsFragment", "getNotReadMesaage : " + (list == null ? "is null" : list.toString()));
		if (cursor != null) {
			cursor.close();
		}
		return list;
	}

	private ArrayList<String> findNamePhotoByNumber(String number) {
		ArrayList<String> name_photo = new ArrayList<String>();
		String name = null;
		String photo_uri = null;
		Uri uri2 = Uri.withAppendedPath(
				ContactsContract.PhoneLookup.CONTENT_FILTER_URI, number);
		Cursor cursor = getContext().getContentResolver().query(uri2,
				new String[] { "display_name", "photo_uri" }, null, null, null);
		if (cursor.getCount() == 0) {
			name = null;
			photo_uri = null;
		} else {
			cursor.moveToNext();
			name = cursor.getString(0x0);
			photo_uri = cursor.getString(cursor.getColumnIndex("photo_uri"));
		}
		if (cursor != null) {
			cursor.close();
		}
		name_photo.add(name);
		name_photo.add(photo_uri);
		Log.d("MmsFragment",
				"findNamePhotoByNumber:name_photo=" + (name_photo == null ? "null"
						: name_photo.toString()));
		return name_photo;
	}

	class MessageListAdapter extends BaseAdapter {

		private MessageListAdapter(MmsFragment p1) {
		}

		public int getCount() {
			return mList.size();
		}

		public Object getItem(int position) {
			return null;
		}

		public long getItemId(int position) {
			return (long) position;
		}

		class ViewHolder {
			TextView message;
			TextView messageNumber;
		}

		public View getView(int position, View convertView, ViewGroup parent) {
			MmsFragment.MessageListAdapter.ViewHolder holder = null;
			NotReadMessage notReadMessage = (NotReadMessage) mList
					.get(position);
			if (convertView == null) {
				holder = new MmsFragment.MessageListAdapter.ViewHolder();
				convertView = View.inflate(getContext(), R.layout.not_read_message_list_item, null);
				holder.message = (TextView) convertView
						.findViewById(R.id.tv_message);
				holder.messageNumber = (TextView) convertView
						.findViewById(R.id.tv_message_number);
				convertView.setTag(holder);
			} else {
				holder = (ViewHolder) convertView.getTag();
			}
			if ((notReadMessage.getmPerson() == null)
					|| (notReadMessage.getmPerson().equals("0"))) {
				holder.messageNumber.setText(notReadMessage.getmAddress());
			} else {
				holder.messageNumber.setText(mList.get(
						position).getmPerson());
			}
			holder.message.setText(notReadMessage.getmBody());
			return convertView;
		}
	}

	class ViewHolder {
		TextView message;
		TextView messageNumber;
	}

	public class ReceiveMms extends BroadcastReceiver {
		public void onReceive(Context p1, Intent p2) {
			Log.d("MmsFragment", "ReceiveMms" + p2.getAction());
			MmsFragment.this.mHandler.sendEmptyMessageDelayed(0x2, 0L);
		}
	}
}
